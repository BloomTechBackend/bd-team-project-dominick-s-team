Resources:
  RecipesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      "AttributeDefinitions":
        - "AttributeName": "name"
          "AttributeType": "S"
        - "AttributeName": "author"
          "AttributeType": "S"
      "KeySchema":
        - "AttributeName": "name"
          "KeyType": "HASH"
        - "AttributeName": "author"
          "KeyType": "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "Recipes"
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
                  Service:
                    - lambda.amazonaws.com
            Action:
                  - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                      - dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                      - logs:*
                Resource: "*"
  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const response = require('./cfn-response');
          const docClient = new AWS.DynamoDB.DocumentClient();
          exports.handler = function(event, context) {
            console.log(JSON.stringify(event,null,2));
            var params = {
              RequestItems: {
                "Recipes": [
                  {
                    PutRequest: {
                      Item: {
                        name: "Tostadas",
                        flavorName: "Melvin Smelvin",
                        ingredients: ["3 tortillas", "1 ground beef", "1 head of lettuce", "1 container or salsa"]
                        instructions: ["brown and season meat", "wash lettuce", "toast tortillas", "add lettuce and meat on tortillas", "top with salsa", "enjoy" ] 
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        name: "Tostada",
                        flavorName: "Melvin Smelvin",
                        ingredients: ["3 tortillas", "1 ground beef", "1 head of lettuce", "1 container or salsa"]
                        instructions: ["brown and season meat", "wash lettuce", "toast tortillas", "add lettuce and meat on tortillas", "top with salsa", "enjoy" ] 
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        name: "Tostado",
                        flavorName: "Melvin Smelvin",
                        ingredients: ["3 tortillas", "1 ground beef", "1 head of lettuce", "1 container or salsa"]
                        instructions: ["brown and season meat", "wash lettuce", "toast tortillas", "add lettuce and meat on tortillas", "top with salsa", "enjoy" ] 
                      }
                    }
                  }
                ]
              }
            };
            docClient.batchWrite(params, function(err, data) {
              if (err) {
                response.send(event, context, "FAILED", {});
              } else {
                response.send(event, context, "SUCCESS", {});
              }
            });
          };
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      # 2020-02-27: [bp] updated from nodejs10.x in case it matters
      Runtime: nodejs18.x
      Timeout: 60
  InitializeEventsTable:
    Type: Custom::InitFunction
    DependsOn: RecipesTable
    Properties:
      ServiceToken:
        Fn::GetAtt: [ InitFunction , "Arn" ]
      DynamoTableName:
        Ref: RecipesTable